
#include <ros/ros.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Twist.h>
#include <nav_msgs/Odometry.h>
class SubscribeAndPublish
{
public:
  SubscribeAndPublish()
  {
  //Topic you want to advertise
  pub = nh.advertise<std_msgs::UInt32>("mc", 1);

  //Topic you want to subscribe
  cmd_vel = nh.subscribe("cmd_vel", 1, &SubscribeAndPublish::callback, this);
  odom = nh.subscribe("changed_odom", 1, &SubscribeAndPublish::save_odom, this);
  }
  void save_odom(const nav_msgs::Odometry& input){
  	last_odom_vel = input.twist.twist.linear.x;
        last_steer_angle = input.twist.twist.angular.z;
  }

  void callback(const geometry_msgs::Twist& input)
  {
    std_msgs::UInt8 drive_vector;
    std_msgs::UInt8 steer_vector;
    std_msgs::UInt32 output;
  
    float vel_error = input.linear.x - last_odom_vel;
    float steer_error = input.angular.z - last_steer_angle;

    float steer_factor = 20;
    float drive_factor = 6;
    

    current_steer_power = steer_error * steer_factor;
    
    current_drive_power = vel_error * drive_factor;
 
    steer_vector.data = 127 + current_steer_power;
    drive_vector.data = 127 + current_drive_power;
    
    output.data = (drive_vector.data&0xFF) | ((steer_vector.data&0xFF) << 8);
    pub.publish(output);
  }

private:
  ros::NodeHandle nh; 
  ros::Publisher pub;
  ros::Subscriber cmd_vel;
  ros::Subscriber odom;
  float last_odom_vel;
  float last_steer_angle;
  int current_drive_power;
  int current_steer_power;

};//End of class SubscribeAndPublish

int main(int argc,char **argv)
{

  ros::init(argc, argv, "arduino_commander");

  //Create an object of class SubscribeAndPublish that will take care of everything
  SubscribeAndPublish SAPObject;

  ros::Rate loop_rate(20);

  ros::spin();

  return 0;
}



